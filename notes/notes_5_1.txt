
map function:
------------
map(function_to_apply, list_of_inputs)

Example
>>> items = [1, 2, 3, 4, 5]
>>> squared = list(map(lambda x: x**2, items))
>>> squared
[1, 4, 9, 16, 25]
>>>


- map_range_for (uf, a) :
  demands "a" to be indexable

- map_for (uf, a) :
  demands "a" to be an iterable

- map_while (uf, a) :
  receives an iterable and generates an iterator
 
----------
Python iterables must implement one special methods, __iter__(). 
the "__iter__" magic function is called, for example, 
when a for-loop starts or run a function like list.

Python iterator object must implement two special methods, 
__iter__() and __next__().

An object is called iterable if we can get an iterator from it. 
Most of built-in containers in Python like: list, tuple, string 
etc. are iterables.

The iter() function (which in turn calls the __iter__() method) 
returns an iterator from them.


-------------

Range and RangeIterator: 
------------------------
In RangeIteratorT we see that range_iterator_class and 
range_iterator_function are imported meaning we 
can implement the rangeIterator functionality in 
both a class and a function.
 
In RangeT we see that range_1, and range_2 are imported. 
More importantly on lines 50-51 list() is called twice 
and we get a new iterator both times! This logic can't be 
done in a function, meaning we need to make a class that responds to __iter__().

 
Range_2:
-------
Range_2 in Range.py is trying to implement a range function that is not exhaustible. 
This is can be easily achieved by not updating the instance variables b and e.
Instead you create two local variables and update them. Doing this, will keep the 
original b and e as they were when the object was initially created, and therefore,
each time you list the object, you get the same sequence of numbers (i.e., not exhaustibale).

Note that a range object is an iterable but not iterator
>>> x = range(4)
>>> hasattr(x, "__iter__")
True
>>> hasattr(x, "__next__")
False
>>> 

Range_1:
-------
Range_1 in Range.py accomplishes the same outcome of Range_2 but using inner classes.
Inner class is a class that is defined inside another class. 
Whenever you create an object of Range_1, you need to pass two variables, namely b and e.
Afterward, whenever you try to navigate this object, You'll get an 
instance of the inner class with the original variable values. 
------

Note:
#Given an iterable, x, using "if x" does not work 
for user-defined iterables. 
# Example.
class iterable: 
      def __iter__(self): 
          return iter([])
          
x = iterable()
if x :
   print("full")
else :
   print("empty")
# full

def a_for (x) :
   for a in x :
      print("inside for")

def a_while (x) :
    p = iter(x)
    try :
        while True :
            w = next(p)
            print("inside while")
    except StopIteration :
        pass

x = iterable()
a_for(x)
a_while(x)