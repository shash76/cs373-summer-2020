Factorial.py and FactorialT.py
------------------------------
Factorial.py:
------------
factorial_recursion
•	Perform recursive calls first, then take the return value of 
the recursive call and calculate the result.  The result won't 
be calculated until you have returned from every recursive call.
•	You need to keep stack frames until the recursion is over 
-- O(n) space. 

factorial_tail_recursion
•	Note that a function inside a function is allowed in Python. 
•	Perform your calculations first and then execute the 
recursive call, passing the results of the current step to 
the next recursive step. 
•	We are reusing the current stack frame so we will never get stack overflow.
•	Some compliers transfer tail recursive functions into loop (but not in Python).
•	Procedure is recursive but the process is not.

FactorialT.py:
------------
with self.subTest(): if one of the test fails, this would be 
the end of test_0. with keeps the test going until it goes through all. 

timeit:
•	timeit function takes three arguments.
•	f.__name__ obtains the name of the current function and "(100)" is the argument to the function.
•	"from __main__ import " + f.__name__ imports the definition of the function
•	number = 1000, determine how many times we are going to run the function.
•	The result, t, is printed after multiply it with 1000 because timeit provides results in microseconds 
and we need it in milliseconds.

Reduce.py:
---------
reduce:
------
- reduce is a higher order function. it takes a function 
  as one of its argument.
- mul is a function from a module called operator. 
  You can think of it as a wrapper for the operator '*'.
- reduce(binary_function, sequence_of_elements[, Seed: base_case_if_seq_is_empty)]

- Note that the initialization is optional. If it's present, 
  it will be placed before the items of the iterable in the calculations. 
  if it's not, and the iterable contain one item, it will return this one item.

  reduce_for_range (bf, a, v) demands a to be indexable.
  reduce_for (bf, a, v) does NOT demand a to indexable. It should only be iterable.
 
  reduce(add,[],0] #0
  reduce(add,[])
  error: no initial value

  e.g., reduce(mul, range(1, 4), 1)
  1*1*2*3
  e.g., reduce(add, range(1,5), 1) = 1 + 1 + 2 + 3 + 4 

  write the function reduce: reduce(bf, iterable, seed) 


- reduce_for_range (bf, a, v) :
  demands "a" to be indexable

- reduce_for (bf, a, v) :
  demands "a" to be an iterable

- reduce_while (bf, a, v) :
  receives an iterable and generates an iterator
-------------


iteration.py: 
------------
Iterables:
- an iterable is an object that you can iterate through.
- iterables usually have the property "__getitem__" 
  that indicates an object is indexable.

>>> x=[2, 3, 4]
>>> hasattr(x, "__iter__")
True
>>> hasattr(x, "__getitem__")
True
>>> hasattr(x, "__next__")
False

Iterators vs generators:
- an iterator object is an object that has the "__iter__" and "__next__" attribute.
- you can get an iterator out of an iterable using iter function.
- generator functions allow you to declare a function that behaves like an iterator, 
  i.e. it can be used in a for loop.
- every generator is an iterator.

iter(): takes an iterable object and returns an iterator.
>>> x=[2, 3, 4]
>>> p = iter(x)
>>> next(p)
2
>>> next(p)
3
>>> next(p)
4
>>> next(p)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>
